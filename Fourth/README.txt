Запрещено использовать коллекции, stream api, а также методы которые возвращают коллекции.
1. Создать класс DataContainer у которого есть один дженерик (обобщение). 
2. Внутри DataContainer должно быть поле T[] data, внутренний массив, которое предназначено для хранения передаваемых объектов. 
3. В данном классе должен быть метод int add(T item) который добавляет данные во внутреннее поле data и возвращает номер позиции,
в которую были вставлены данные, начиная с 0.
	3.1. Если поле data не переполнено то данные нужно добавлять в первую позицию (ячейку) после последней заполненной позиции (ячейки). 
	3.2. В случае если поле data переполнено, нужно придумать механизм который будет расширять пространство для новых элементов.
4. В данном классе должен быть метод T get(int index). Данный метод получает из DataContainer'а, из поля data, предварительно сохранённый объект.
5. В данном классе должен быть метод T[] getItems(). Данный метод возвращает поле data.
6. Добавить метод boolean delete(int index) который будет удалять элемент из нашего поля data по индексу. 
	6.1. Метод возвращает true если у нас получилось удалить данные. 
	6.2. Метод возвращает false если нет такого индекса. 
	6.3. Освободившуюся ячейку в поеле data необходимо удалить полностью. Пустых элементов не должно быть. 
7. Добавить метод boolean delete(T item) который будет удалять элемент из нашего поля data. 
	7.1. Метод возвращает true если у нас получилось удалить данные. 
	7.2. Метод возвращает false если нет такого элемента. 
	7.3. Освободившуюся ячейку необходимо удалить полностью. Пустых элементов не должно быть. 
8. Добавить НЕ СТАТИЧЕСКИЙ метод void sort(Comparator<.......> comparator). Данный метод занимается сортировкой данных записанных в поле data используя реализацию сравнения из ПЕРЕДАННОГО объекта comparator. Классом Arrays пользоваться запрещено.
9. Переопределить метод toString() в классе и выводить содержимое data без ячеек в которых хранится null.
10.* В даном классе должен быть СТАТИЧЕСКИЙ метод void sort(DataContainer<.............> container),
который будет принимать объект DataContainer с дженериком extends Comparable. Данный метод будет сортировать элементы
в ПЕРЕДАННОМ объекте DataContainer используя реализацию сравнения вызываемый у хранимых объектов.
11.* В данном классе должен быть СТАТИЧЕСКИЙ метод void sort(DataContainer<.............> container, Comparator<.......> comparator),
который будет принимать объект DataContainer и реализацию интерфейса Comparator. Данный метод будет сортировать элементы
в ПЕРЕДАННОМ объекте DataContainer используя реализацию сравнения из ПЕРЕДАННОГО объекта интерфейса Comparator.