1. Создать класс WithoutCalculatorMain в котором необходимо посчитать следующие выражения: 
	1.1. 4.1 + 15 * 7 + (28 / 5) ^ 2. Вывести сохранённый результат в консоль. Внимание, знак "^" обозначает возведение в степень.
2. Создать класс CalculatorWithOperator.
	2.1. Все методы объявленные в данном классе НЕ статические (не имеют модификатор static). 
	2.2. В классе должны присутствовать математические методы:
		2.2.1. 4 базовых математических метода (деление, умножение, вычитание, сложение),
		каждый из этих методов должен принимать два параметра (определитесь с их типами)
		и должны возвращать результат (определиться с возвращаемым типом результата) при помощи ключевого слово return. 
		2.2.2. 3 метода (Возведение в целую степень дробного положительного числа, Модуль числа, Корень из числа). 
	2.3. В методах можно использовать любые арифметические операторы.
	2.4. Использование библиотеки Math ЗАПРЕЩЕНО! (кроме извлечения корня).й Math.
	2.5. Создать класс CalculatorWithOperatorMain. В main методе требуется создать экземпляр калькулятора
	и используя методы из данного экземпляра посчитать выражения из задания 1. Вывести в консоль результат.
3. Создать класс CalculatorWithMathCopy.
	3.1. Все методы объявленные в данном классе НЕ статические (не имеют модификатор static). 
	3.2. В классе должны присутствовать математические методы:
		3.2.1. 4 базовых математических метода (деление, умножение, вычитание, сложение). Скопировать базовые математические операции из CalculatorWithOperator.
		3.2.2. 3 метода (Возведение в целую степень дробного положительного числа, Модуль числа, Корень из числа). 
		Данные методы должны содержать в своём теле вызов библиотеки Math и возврат полученного результата.
	3.3. Создать класс CalculatorWithMathCopyMain. В main методе требуется создать экземпляр калькулятора 
	и используя методы из данного экземпляра посчитать выражения из задания 1. Вывести в консоль результат.
4. Создать класс CalculatorWithMathExtends.
	4.1. Все методы объявленные в данном классе НЕ статические (не имеют модификатор static).
	4.2. Данный класс должен наследовать класс CalculatorWithOperator.
	4.3. В классе должны присутствовать
		4.3.1. 4 базовых математических метода (деление, умножение, вычитание, сложение) НЕ ДОЛЖНЫ быть объявлены в классе, 
		а должны быть унаследованы от родительского класса.
		4.3.2. 3 метода (Возведение в целую степень дробного положительного числа, Модуль числа, Корень из числа). 
		Данные методы должны ПЕРЕОПРЕДЕЛЯТЬ методы родительского класса и должны содержать в своём теле вызов библиотеки Math
		и возврат полученного результата .
	4.4. Создать класс CalculatorWithMathExtendsMain. В main методе требуется создать экземпляр калькулятора
	и используя методы из данного экземпляра посчитать выражения из задания 1. Вывести в консоль результат.
5. Создать класс CalculatorWithCounter.
	5.1. Все методы объявленные в данном классе НЕ статические (не имеют модификатор static). 
	5.2. В классе должен быть метод void incrementCountOperation() который должен увеличивать внутренний счётчик в калькуляторе.
	5.3. В классе должен быть метод long getCountOperation() который должен возвращать количество использований данного калькулятора. 
	5.4. Создать класс CalculatorWithCounterClassicMain. В main методе требуется создать экземпляр калькулятора и используя методы 
	из данного экземпляра посчитать выражения из задания 1. Вывести в консоль результат и количество использования калькулятора.
6. Создать CalculatorWithMemory.
	6.1. Данный калькулятор предназначен для того чтобы расширить возможности калькулятора и обеспечить его дополнительной функцией памяти.
	6.2. Все методы объявленные в данном классе НЕ статические (не имеют модификатор static).
	6.3. Данный класс напрямую не умеет считать математику.
	6.4. В классе должны присутствовать математические методы:
		10.4.1 4 базовых математических метода (деление, умножение, вычитание, сложение).
		10.4.2 3 метода (Возведение в целую степень дробного положительного числа, Модуль числа, Корень из числа).
	6.5. Функция памяти работает через методы:
		10.5.1 Записать в память результат выполнения последнего вызванного метода. У данного метода не должно быть параметров.
		Данный метод вызывается непосредтвенно пользователем, а не автоматический.
		10.5.2 Получить из памяти записанное значение. При получении записи из памяти память стирается, при записи нового значения
		память перезаписывается. Данный метод вызывается непосредтвенно пользователем, а не автоматический.
	6.6. Создать класс CalculatorWithMemoryMain. В main методе требуется создать экземпляр калькулятора и используя методы 
	из данного экземпляра посчитать выражения из задания 1. Вывести в консоль результат. В мэйне запрещается использование переменных
	для хранения значений участвующих в просчёте, а также результатов работы методов калькулятора. 

7. Создать класс CalculatorWithCounterDecorator и CalculatorWithMemoryDecorator
	7.1. Отличие от предыдущих CalculatorWithCounter и CalculatorWithMemory в том что данные классы реализуют интерфейс ICalculator.
	7.2. Добавить в эти классы метод ICalculator getCalculator() который будут возвращать вложенный в них калькулятор.
	7.3. Создать класс CalculatorDecoratorMain. Cоздать переменную типа ICalculator записав в неё 
	новый экземпляр класса CalculatorWithCounterDecorator которому в конструктор был передан новый экземпляр 
	класса CalculatorWithMemoryDecorator которому в конструтор был передан новый экземпляр класса CalculatorWithMathExtends.
	Используя созданную переменную посчитать выражения из задания 1. 